'''
Created on 2020-11-12

@author: wf
'''

class PlantUml(object):
    '''
    classdocs
    '''
    
    # redundant to skinparams in pylodstorage.uml
    skinparams="""
' BITPlan Corporate identity skin params
' Copyright (c) 2015-2020 BITPlan GmbH
' see http://wiki.bitplan.com/PlantUmlSkinParams#BITPlanCI
' skinparams generated by com.bitplan.restmodelmanager
skinparam note {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam component {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam package {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam usecase {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam activity {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam classAttribute {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam interface {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam class {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
skinparam object {
  BackGroundColor #FFFFFF
  FontSize 12
  ArrowColor #FF8000
  BorderColor #FF8000
  FontColor black
  FontName Technical
}
hide Circle
' end of skinparams '
"""

    def __init__(self,debug=False,withSkin=True):
        '''
        Constructor
        '''
        self.debug=debug
        self.withSkin=withSkin
        self.uml=""
        
    def __str__(self):
        return self.uml
        
    def fromDIF(self,dif):
        packages={}
        classes={}
        properties={}
        for triple in dif.triples:
            print(triple)
            if triple.p=="isA":
                itkey=triple.s
                if triple.o=="Context":
                    packageKey=itkey
                    packages[itkey]={"classes":{}}
                    it=packages[itkey]
                elif  triple.o=="Topic":
                    classKey="%s.%s" % (packageKey,itkey)
                    classes[classKey]={"properties":{}}                   
                    it=classes[classKey]
                elif triple.o=="Property": 
                    propKey="%s.%s" % (classKey,itkey)  
                    properties[propKey]={}  
                    it=properties[propKey]
            elif triple.o=="it":
                if triple.p=="addsTo":
                    # redundant forward declaration
                    pass
                elif triple.p=="context":
                    parentKey=triple.s
                    packages[parentKey]["classes"][classKey]=classes[classKey]
                    pass
                elif triple.p=="topic":
                    parentKey="%s.%s" % (packageKey,triple.s)
                    classes[parentKey]["properties"][propKey]=properties[propKey]
                    pass                    
                else:
                    it[triple.p]=triple.s
                
                
        for packageKey in packages.keys():
            package=packages[packageKey]
            self.uml+="package %s {\n" % package['name']
            for classKey in package["classes"]:
                uclass=classes[classKey]
                className=uclass['name']
                if 'documentation' in uclass:
                    self.uml+="Note top of %s\n%s\nEnd note\n" % (className,uclass['documentation'])
                self.uml+="  class %s {\n" % className
                for propKey in uclass["properties"]:
                    prop=properties[propKey]
                    self.uml+="    %s:%s\n" % (prop['name'],prop['type'])
                self.uml+="  }\n"
            self.uml+="}\n"        
        if self.withSkin:
            self.uml+=PlantUml.skinparams    
        return self.uml

        
    @staticmethod 
    def ofDIF(dif):
        uml=PlantUml()
        uml.fromDIF(dif)
        return uml